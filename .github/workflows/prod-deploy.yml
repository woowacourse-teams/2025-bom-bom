name: Backend Prod Server CI/CD  # ✅ dev → prod 이름 변경

on:
  push:
    branches:
      - server   # ✅ server-dev → server
  workflow_dispatch:    # ✅ GitHub UI에서 수동 배포

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend/bom-bom-server

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 21 설정
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: gradle

      - name: application.yml 생성 (Prod 환경)
        run: |
          echo "Create application.yml(prod) from secret"
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_PROD_PROPERTIES }}" > src/main/resources/application.yml  # ✅ DEV → PROD
          
          echo "Create application.yml(test) from secret"
          mkdir -p src/test/resources
          echo "${{ secrets.APPLICATION_TEST_PROPERTIES }}" > src/test/resources/application.yml

      - name: JAR 빌드
        run: ./gradlew build --no-daemon

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: DockerHub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker 이미지 빌드 및 푸시
        run: |
          if ! docker buildx inspect ci-builder &>/dev/null; then
            docker buildx create --use --name ci-builder
          else
            docker buildx use ci-builder
          fi
          docker buildx build \
            --platform linux/arm64,linux/amd64 \
            --cache-from=type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/bom-bom:buildcache \
            --cache-to=type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/bom-bom:buildcache,mode=max \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/bom-bom:prod \
            --push .

  deploy:
    name: Production Server 배포
    needs: build
    runs-on: [ self-hosted, prod ]  # ✅ main → prod (runner에 따라 조정)
    defaults:
      run:
        working-directory: ./backend/bom-bom-server

    environment:
      name: production
      url: https://api.bombom.news # ✅ 실제 운영 서비스 URL

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: DockerHub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: .env file 생성
        run: |
          cat <<EOF > .env
          RDS_ENDPOINT=${{ secrets.PROD_RDS_ENDPOINT }}
          DATABASE=${{ secrets.PROD_DATABASE }}
          MYSQL_USER=${{ secrets.PROD_MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.PROD_MYSQL_PASSWORD }}
          EOF

      - name: 컨테이너 재실행
        run: |
          sudo docker compose \
            -f docker-compose-prod.yml \
            --env-file .env \
            up -d --remove-orphans --pull=always

      - name: Docker 리소스 정리
        run: |
          sudo docker container prune -f --filter "until=24h"
          sudo docker image prune     -f --filter "until=24h"

name: Backend Blue-Green CI/CD

on:
  push:
    branches:
      - server-blue-green
  workflow_dispatch:

env:
  WORKING_BRANCH: server-blue-green
  HEALTH_CHECK_URL: http://localhost:8081/actuator/health
  SERVER_CONTAINER_NAME: bombom-server-prod-sub

jobs:
  # ---------------------------------------------------
  # 1️⃣ Build & Test & Push
  # ---------------------------------------------------
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend/bom-bom-server

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          ref: ${{ env.WORKING_BRANCH }}

      - name: JDK 21 설정
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: gradle

      - name: application.yml 생성 (Prod 환경)
        run: |
          mkdir -p src/main/resources
          printf '%s' "${{ secrets.APPLICATION_PROD_PROPERTIES }}" > src/main/resources/application.yml

      - name: Gradle 빌드
        run: ./gradlew clean assemble --no-daemon --stacktrace --info

      - name: JAR 업로드
        uses: actions/upload-artifact@v4
        with:
          name: bom-bom-jar
          path: ./backend/bom-bom-server/build/libs/*.jar
          if-no-files-found: error

  test:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ./backend/bom-bom-server

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          ref: ${{ env.WORKING_BRANCH }}

      - name: JDK 21 설정
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
          cache: gradle

      - name: application.yml 생성 (Test)
        run: |
          mkdir -p src/test/resources
          printf '%s' "${{ secrets.APPLICATION_TEST_PROPERTIES }}" > src/test/resources/application.yml

      - name: 테스트 실행
        env:
          SPRING_PROFILES_ACTIVE: test
          APPLE_P8_ESCAPED: ${{ secrets.APPLE_P8_ESCAPED }}
        run: |
          export OAUTH2_APPLE_PRIVATE_KEY="$(printf '%b' "$APPLE_P8_ESCAPED")"
          ./gradlew test --no-daemon --stacktrace --info

  docker-image:
    runs-on: ubuntu-latest
    needs: [build, test]
    defaults:
      run:
        working-directory: ./backend/bom-bom-server
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          ref: ${{ env.WORKING_BRANCH }}

      - name: JAR 다운로드
        uses: actions/download-artifact@v4
        with:
          name: bom-bom-jar
          path: ./backend/bom-bom-server/build/libs

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: DockerHub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker 이미지 빌드 및 푸시
        run: |
          docker buildx build \
            --platform linux/arm64,linux/amd64 \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/bom-bom:prod \
            --push .
          echo "✅ Docker 이미지 푸시 완료"

  # ---------------------------------------------------
  # 2️⃣ prod-sub 배포 준비 (트래픽 전환)
  # ---------------------------------------------------
  shift-traffic-to-main:
    name: "🔀 Step 1: 트래픽을 prod-main으로 이동"
    needs: docker-image
    runs-on: [self-hosted, lb]
    steps:
      - name: prod-sub → prod-main 트래픽 이동
        run: |
          echo "🔄 prod-sub 서버 비활성화"
          echo "disable server app_servers/prod-sub" | sudo socat stdio /var/run/haproxy.sock
          echo "✅ 모든 트래픽이 prod-main으로 이동되었습니다."

  # ---------------------------------------------------
  # 3️⃣ prod-sub 배포
  # ---------------------------------------------------
  deploy-sub:
    name: "🚀 Step 2: prod-sub 배포"
    needs: shift-traffic-to-main
    runs-on: [self-hosted, prod-sub]
    defaults:
      run:
        working-directory: ./backend/bom-bom-server

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          ref: ${{ env.WORKING_BRANCH }}

      - name: DockerHub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 🧩 배포 전 현재 실행 중 컨테이너 이미지 백업
      - name: 현재 실행 중 컨테이너 이미지 latest-stable로 백업
        run: |
          echo "🧩 현재 실행 중 ${{ env.SERVER_CONTAINER_NAME }} 이미지 백업 시작"
          sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          CURRENT_IMAGE=$(sudo docker inspect ${{ env.SERVER_CONTAINER_NAME }} --format='{{.Config.Image}}' 2>/dev/null || echo "none")
          CURRENT_IMAGE=$(echo "$CURRENT_IMAGE" | tr -d '\r\n')   # ✅ 공백/개행 제거
          echo "현재 이미지: $CURRENT_IMAGE"
          
          if [ "$CURRENT_IMAGE" != "none" ]; then
            echo "🔄 현재 이미지를 latest-stable로 태깅 및 푸시"
            sudo docker pull "$CURRENT_IMAGE" || true
            sudo docker tag "$CURRENT_IMAGE" bombomnewsletter/bom-bom:latest-stable
            sudo docker push bombomnewsletter/bom-bom:latest-stable
            echo "✅ 백업 완료: latest-stable"
          else
            echo "⚠️ 실행 중인 ${{ env.SERVER_CONTAINER_NAME }} 컨테이너가 없어 백업을 건너뜀"
          fi

      - name: .env file 생성
        run: |
          cat <<EOF > .env
          RDS_ENDPOINT=${{ secrets.PROD_RDS_ENDPOINT }}
          DATABASE=${{ secrets.PROD_DATABASE }}
          MYSQL_USER=${{ secrets.PROD_MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.PROD_MYSQL_PASSWORD }}
          SPRING_PROFILES_ACTIVE=prod
          PROD_OTEL_ENDPOINT=${{ secrets.PROD_OTEL_ENDPOINT }}
          EOF

      - name: 기존 컨테이너 중지 및 삭제
        run: |
          if sudo docker ps --format "{{.Names}}" | grep -q "${{ env.SERVER_CONTAINER_NAME }}"; then
            echo "🛑 기존 컨테이너 중지 및 삭제"
            sudo docker stop ${{ env.SERVER_CONTAINER_NAME }} || true
            sudo docker rm ${{ env.SERVER_CONTAINER_NAME }} || true
          fi

      - name: 컨테이너 재실행
        shell: bash
        env:
          APPLE_P8_ESCAPED: ${{ secrets.APPLE_P8_ESCAPED }}
        run: |
          set -euo pipefail
          export OAUTH2_APPLE_PRIVATE_KEY="$(printf '%b' "$APPLE_P8_ESCAPED")"
          echo "HOST_LEN=${#OAUTH2_APPLE_PRIVATE_KEY}"

          sudo --preserve-env=OAUTH2_APPLE_PRIVATE_KEY docker compose \
            -f docker-compose-prod-sub.yml --env-file .env config | rg -n 'OAUTH2_APPLE_PRIVATE_KEY' || true

          sudo --preserve-env=OAUTH2_APPLE_PRIVATE_KEY docker compose \
            -f docker-compose-prod-sub.yml --env-file .env down || true

          sudo --preserve-env=OAUTH2_APPLE_PRIVATE_KEY docker compose \
            -f docker-compose-prod-sub.yml --env-file .env \
            up -d --remove-orphans --pull=always --force-recreate
          
          echo "✅ prod-sub 컨테이너 실행 완료"

      - name: 컨테이너 헬스체크
        run: |
          echo "🏥 컨테이너 헬스체크 시작..."
          
          # 컨테이너가 완전히 기동될 시간을 약간 기다림
          echo "⏳ 컨테이너 기동 대기 (20초)"
          sleep 20
          
          SUCCESS_COUNT=0
          MAX_RETRIES=40        # 총 40번(약 400초) 시도
          REQUIRED_SUCCESS=5    # 연속 5회 성공해야 진짜 Healthy
          
          for ((i=1; i<=MAX_RETRIES; i++)); do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.HEALTH_CHECK_URL }} || echo "000")
          
            if [ "$STATUS" = "200" ]; then
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              echo "✅ ($SUCCESS_COUNT/${REQUIRED_SUCCESS}) 성공 ($i/${MAX_RETRIES})"
          
              if [ "$SUCCESS_COUNT" -ge "$REQUIRED_SUCCESS" ]; then
                echo "🎉 컨테이너가 연속 ${REQUIRED_SUCCESS}회 이상 Healthy 상태입니다."
                exit 0
              fi
            else
              # 실패 시 카운터 리셋
              if [ "$SUCCESS_COUNT" -gt 0 ]; then
                echo "⚠️ 상태 불안정, 카운터 리셋 (${SUCCESS_COUNT} → 0)"
              fi
              SUCCESS_COUNT=0
              echo "⏳ 상태: $STATUS ($i/${MAX_RETRIES})"
            fi
          
            sleep 10
          done
          
          echo "❌ 헬스체크 실패 (연속 ${REQUIRED_SUCCESS}회 성공 조건 미충족)"
          sudo docker logs ${{ env.SERVER_CONTAINER_NAME }} --tail 50 || true
          exit 1

  # ---------------------------------------------------
  # 4️⃣ prod-sub 배포 실패 시 rollback
  # ---------------------------------------------------
  # X-1) 메인 롤백 시작: 트래픽 상태 정리 (sub만 활성, main 비활성 보장)
  rollback-sub-prepare:
    if: failure() && needs.deploy-sub.result == 'failure'
    needs: deploy-sub
    runs-on: [ self-hosted, lb ]
    steps:
      - name: 트래픽 상태 정리 (main active / sub disabled)
        run: |
          echo "enable server app_servers/prod-main" | sudo socat stdio /var/run/haproxy.sock
          echo "disable server app_servers/prod-sub"   | sudo socat stdio /var/run/haproxy.sock
          echo "✅ 트래픽 상태 정리 완료"

  # X-4) sub도 이전 버전으로 복구 + readiness 헬스체크
  rollback-sub-deploy:
    if: failure() && needs.deploy-sub.result == 'failure'
    needs: rollback-sub-prepare
    runs-on: [self-hosted, prod-sub]
    steps:
      - name: prod-sub를 이전 버전 컨테이너로 build
        run: |
          sudo docker stop ${{ env.SERVER_CONTAINER_NAME }} || true
          sudo docker rm   ${{ env.SERVER_CONTAINER_NAME }} || true
          sudo docker run -d --name ${{ env.SERVER_CONTAINER_NAME }} \
            -p 80:8080 -p 8081:8081 \
            --env-file .env \
            ${{ secrets.DOCKERHUB_USERNAME }}/bom-bom:latest-stable
          echo "⏳ wait sub readiness..."
          for i in {1..40}; do
            s=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.HEALTH_CHECK_URL }} || echo "000")
            [ "$s" = "200" ] && echo "✅ prod-sub ready" && exit 0
            sleep 10
          done
          echo "❌ prod-sub not ready"; exit 1

  # X-5) 최종 트래픽 정상화(원래의 양쪽 활성/가중치로 복귀)
  rollback-sub-restore-final-traffic:
    if: failure() && needs.deploy-sub.result == 'failure'
    needs: rollback-sub-deploy
    runs-on: [self-hosted, lb]
    steps:
      - name: 트래픽 정상화
        run: |
          echo "enable server app_servers/prod-main" | sudo socat stdio /var/run/haproxy.sock
          echo "enable server app_servers/prod-sub"  | sudo socat stdio /var/run/haproxy.sock
          echo "✅ 전체 롤백 후 트래픽 정상화 완료"

  # ---------------------------------------------------
  # 4️⃣ 트래픽 전환: prod-main → prod-sub
  # ---------------------------------------------------
  shift-traffic-to-sub:
    name: "🔀 Step 3: 트래픽을 prod-sub로 전환"
    needs: deploy-sub
    runs-on: [self-hosted, lb]
    steps:
      - name: prod-main → prod-sub 트래픽 이동
        run: |
          echo "🔄 prod-main 비활성화"
          echo "disable server app_servers/prod-main" | sudo socat stdio /var/run/haproxy.sock
          echo "🔄 prod-sub 활성화"
          echo "enable server app_servers/prod-sub" | sudo socat stdio /var/run/haproxy.sock
          echo "✅ 트래픽이 prod-sub로 이동되었습니다."

  # ---------------------------------------------------
  # 5️⃣ prod-main 배포
  # ---------------------------------------------------
  deploy-main:
    name: "🚀 Step 4: prod-main 배포"
    needs: shift-traffic-to-sub
    runs-on: [self-hosted, prod-main]
    defaults:
      run:
        working-directory: ./backend/bom-bom-server

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          ref: ${{ env.WORKING_BRANCH }}

      - name: DockerHub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 🧩 배포 전 현재 실행 중 컨테이너 이미지 백업
      - name: 현재 실행 중 컨테이너 이미지 latest-stable로 백업
        run: |
          echo "🧩 현재 실행 중 ${{ env.SERVER_CONTAINER_NAME }} 이미지 백업 시작"
          sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          CURRENT_IMAGE=$(sudo docker inspect ${{ env.SERVER_CONTAINER_NAME }} --format='{{.Config.Image}}' 2>/dev/null || echo "none")
          CURRENT_IMAGE=$(echo "$CURRENT_IMAGE" | tr -d '\r\n')   # ✅ 공백/개행 제거
          echo "현재 이미지: $CURRENT_IMAGE"
          
          if [ "$CURRENT_IMAGE" != "none" ]; then
            echo "🔄 현재 이미지를 latest-stable로 태깅 및 푸시"
            sudo docker pull "$CURRENT_IMAGE" || true
            sudo docker tag "$CURRENT_IMAGE" bombomnewsletter/bom-bom:latest-stable
            sudo docker push bombomnewsletter/bom-bom:latest-stable
            echo "✅ 백업 완료: latest-stable"
          else
            echo "⚠️ 실행 중인 ${{ env.SERVER_CONTAINER_NAME }} 컨테이너가 없어 백업을 건너뜀"
          fi

      - name: .env file 생성
        run: |
          cat <<EOF > .env
          RDS_ENDPOINT=${{ secrets.PROD_RDS_ENDPOINT }}
          DATABASE=${{ secrets.PROD_DATABASE }}
          MYSQL_USER=${{ secrets.PROD_MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.PROD_MYSQL_PASSWORD }}
          SPRING_PROFILES_ACTIVE=prod
          PROD_OTEL_ENDPOINT=${{ secrets.PROD_OTEL_ENDPOINT }}
          EOF

      - name: 기존 컨테이너 중지 및 삭제
        run: |
          if sudo docker ps --format "{{.Names}}" | grep -q "${{ env.SERVER_CONTAINER_NAME }}"; then
            echo "🛑 기존 컨테이너 중지 및 삭제"
            sudo docker stop ${{ env.SERVER_CONTAINER_NAME }} || true
            sudo docker rm ${{ env.SERVER_CONTAINER_NAME }} || true
          fi

      - name: 컨테이너 재실행
        shell: bash
        env:
          APPLE_P8_ESCAPED: ${{ secrets.APPLE_P8_ESCAPED }}
        run: |
          set -euo pipefail
          export OAUTH2_APPLE_PRIVATE_KEY="$(printf '%b' "$APPLE_P8_ESCAPED")"
          echo "HOST_LEN=${#OAUTH2_APPLE_PRIVATE_KEY}"

          sudo --preserve-env=OAUTH2_APPLE_PRIVATE_KEY docker compose \
            -f docker-compose-prod-sub.yml --env-file .env config | rg -n 'OAUTH2_APPLE_PRIVATE_KEY' || true

          sudo --preserve-env=OAUTH2_APPLE_PRIVATE_KEY docker compose \
            -f docker-compose-prod-sub.yml --env-file .env down || true

          sudo --preserve-env=OAUTH2_APPLE_PRIVATE_KEY docker compose \
            -f docker-compose-prod-sub.yml --env-file .env \
            up -d --remove-orphans --pull=always --force-recreate
          
          echo "✅ prod-main 컨테이너 실행 완료"

      - name: 컨테이너 헬스체크
        run: |
          echo "🏥 컨테이너 헬스체크 시작..."
          
          # 컨테이너가 완전히 기동될 시간을 약간 기다림
          echo "⏳ 컨테이너 기동 대기 (20초)"
          sleep 20
          
          SUCCESS_COUNT=0
          MAX_RETRIES=40        # 총 40번(약 400초) 시도
          REQUIRED_SUCCESS=5    # 연속 5회 성공해야 진짜 Healthy
          
          for ((i=1; i<=MAX_RETRIES; i++)); do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.HEALTH_CHECK_URL }} || echo "000")
          
            if [ "$STATUS" = "200" ]; then
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              echo "✅ ($SUCCESS_COUNT/${REQUIRED_SUCCESS}) 성공 ($i/${MAX_RETRIES})"
          
              if [ "$SUCCESS_COUNT" -ge "$REQUIRED_SUCCESS" ]; then
                echo "🎉 컨테이너가 연속 ${REQUIRED_SUCCESS}회 이상 Healthy 상태입니다."
                exit 0
              fi
            else
              # 실패 시 카운터 리셋
              if [ "$SUCCESS_COUNT" -gt 0 ]; then
                echo "⚠️ 상태 불안정, 카운터 리셋 (${SUCCESS_COUNT} → 0)"
              fi
              SUCCESS_COUNT=0
              echo "⏳ 상태: $STATUS ($i/${MAX_RETRIES})"
            fi
          
            sleep 10
          done
          
          echo "❌ 헬스체크 실패 (연속 ${REQUIRED_SUCCESS}회 성공 조건 미충족)"
          sudo docker logs ${{ env.SERVER_CONTAINER_NAME }} --tail 50 || true
          exit 1

  # ---------------------------------------------------
  # 5️⃣ prod-main 배포 실패 시 rollback
  # ---------------------------------------------------
  # X-1) 메인 롤백 시작: 트래픽 상태 정리 (sub만 활성, main 비활성 보장)
  rollback-main-prepare:
    if: failure() && needs.deploy-main.result == 'failure'
    needs: deploy-main
    runs-on: [self-hosted, lb]
    steps:
      - name: 트래픽 상태 정리 (sub active / main disabled)
        run: |
          echo "disable server app_servers/prod-main" | sudo socat stdio /var/run/haproxy.sock
          echo "enable server app_servers/prod-sub"   | sudo socat stdio /var/run/haproxy.sock
          echo "✅ 트래픽 상태 정리 완료"

  # X-2) main 이전 버전으로 복구 + readiness 헬스체크
  rollback-main-redeploy:
    if: failure() && needs.deploy-main.result == 'failure'
    needs: rollback-main-prepare
    runs-on: [self-hosted, prod-main]
    steps:
      - name: prod-main을 이전 버전 컨테이너로 build
        run: |
          sudo docker stop ${{ env.SERVER_CONTAINER_NAME }} || true
          sudo docker rm   ${{ env.SERVER_CONTAINER_NAME }} || true
          sudo docker run -d --name ${{ env.SERVER_CONTAINER_NAME }} \
            -p 80:8080 -p 8081:8081 \
            --env-file .env \
            ${{ secrets.DOCKERHUB_USERNAME }}/bom-bom:latest-stable
          echo "⏳ wait main readiness..."
          for i in {1..40}; do
            s=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.HEALTH_CHECK_URL }} || echo "000")
            [ "$s" = "200" ] && echo "✅ prod-main ready" && exit 0
            sleep 10
          done
          echo "❌ prod-main not ready"; exit 1

  # X-3) main이 살아났으니 트래픽 전체를 main으로 전환
  rollback-shift-traffic-to-main:
    if: failure() && needs.deploy-main.result == 'failure'
    needs: rollback-main-redeploy
    runs-on: [self-hosted, lb]
    steps:
      - name: 모든 트래픽을 prod-main으로 전환
        run: |
          echo "enable  server app_servers/prod-main" | sudo socat stdio /var/run/haproxy.sock
          echo "disable server app_servers/prod-sub"  | sudo socat stdio /var/run/haproxy.sock
          echo "✅ main으로 트래픽 전환 완료"

  # X-4) sub도 이전 버전으로 복구 + readiness 헬스체크
  rollback-sub-redeploy:
    if: failure() && needs.deploy-main.result == 'failure'
    needs: rollback-shift-traffic-to-main
    runs-on: [self-hosted, prod-sub]
    steps:
      - name: prod-sub를 이전 버전 컨테이너로 build
        run: |
          sudo docker stop ${{ env.SERVER_CONTAINER_NAME }} || true
          sudo docker rm   ${{ env.SERVER_CONTAINER_NAME }} || true
          sudo docker run -d --name ${{ env.SERVER_CONTAINER_NAME }} \
            -p 80:8080 -p 8081:8081 \
            --env-file .env \
            ${{ secrets.DOCKERHUB_USERNAME }}/bom-bom:latest-stable
          echo "⏳ wait sub readiness..."
          for i in {1..40}; do
            s=$(curl -s -o /dev/null -w "%{http_code}" ${{ env.HEALTH_CHECK_URL }} || echo "000")
            [ "$s" = "200" ] && echo "✅ prod-sub ready" && exit 0
            sleep 10
          done
          echo "❌ prod-sub not ready"; exit 1

  # X-5) 최종 트래픽 정상화(원래의 양쪽 활성/가중치로 복귀)
  rollback-prod-restore-final-traffic:
    if: failure() && needs.deploy-main.result == 'failure'
    needs: rollback-sub-redeploy
    runs-on: [self-hosted, lb]
    steps:
      - name: 트래픽 정상화
        run: |
          echo "enable server app_servers/prod-main" | sudo socat stdio /var/run/haproxy.sock
          echo "enable server app_servers/prod-sub"  | sudo socat stdio /var/run/haproxy.sock
          echo "✅ 전체 롤백 후 트래픽 정상화 완료"

  # ---------------------------------------------------
  # 6️⃣ 트래픽 복구
  # ---------------------------------------------------
  restore-final-traffic:
    name: "🔁 Step 5: 트래픽 원상복구"
    needs: deploy-main
    runs-on: [self-hosted, lb]
    steps:
      - name: HAProxy 트래픽 비율 복귀
        run: |
          echo "🔄 prod-main 재활성화"
          echo "enable server app_servers/prod-main" | sudo socat stdio /var/run/haproxy.sock
          echo "✅ 배포 완료 및 트래픽 정상화"

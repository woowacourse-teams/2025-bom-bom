/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RecommendRouteImport } from './routes/recommend'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ArticlesArticleIdRouteImport } from './routes/articles.$articleId'

const RecommendRoute = RecommendRouteImport.update({
  id: '/recommend',
  path: '/recommend',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ArticlesArticleIdRoute = ArticlesArticleIdRouteImport.update({
  id: '/articles/$articleId',
  path: '/articles/$articleId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/recommend': typeof RecommendRoute
  '/articles/$articleId': typeof ArticlesArticleIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/recommend': typeof RecommendRoute
  '/articles/$articleId': typeof ArticlesArticleIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/recommend': typeof RecommendRoute
  '/articles/$articleId': typeof ArticlesArticleIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/recommend' | '/articles/$articleId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/recommend' | '/articles/$articleId'
  id: '__root__' | '/' | '/login' | '/recommend' | '/articles/$articleId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  RecommendRoute: typeof RecommendRoute
  ArticlesArticleIdRoute: typeof ArticlesArticleIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/recommend': {
      id: '/recommend'
      path: '/recommend'
      fullPath: '/recommend'
      preLoaderRoute: typeof RecommendRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/articles/$articleId': {
      id: '/articles/$articleId'
      path: '/articles/$articleId'
      fullPath: '/articles/$articleId'
      preLoaderRoute: typeof ArticlesArticleIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  RecommendRoute: RecommendRoute,
  ArticlesArticleIdRoute: ArticlesArticleIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

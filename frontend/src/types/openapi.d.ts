/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/members/me/pet/attendance': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['attend'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/highlights': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getHighlights'];
    put?: never;
    post: operations['createHighlight'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/bookmarks/articles/{articleId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['addBookmark'];
    delete: operations['deleteBookmark'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/auth/signup': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['signup'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/auth/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['logout'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/members/me/reading/progress/week/goal': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch: operations['updateWeeklyGoalCount'];
    trace?: never;
  };
  '/api/v1/highlights/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations['deleteHighlight'];
    options?: never;
    head?: never;
    patch: operations['updateHighlight'];
    trace?: never;
  };
  '/api/v1/articles/{id}/read': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch: operations['updateIsRead'];
    trace?: never;
  };
  '/api/v1/newsletters': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getNewsletters'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/members/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getMember'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/members/me/reading': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getReadingInformation'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/members/me/pet': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getPet'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/bookmarks': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getBookmarks'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/bookmarks/status/articles/{articleId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getBookmarkStatus'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/auth/login/{provider}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['login'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/articles': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getArticles'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/articles/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getArticleDetail'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/articles/statistics/categories': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getArticleCategoryStatistics'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Member: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: int64 */
      id?: number;
      provider?: string;
      providerId?: string;
      email?: string;
      nickname?: string;
      profileImageUrl?: string;
      /** Format: date-time */
      birthDate?: string;
      /** @enum {string} */
      gender?: 'MALE' | 'FEMALE';
      /** Format: int64 */
      roleId?: number;
    };
    Color: {
      value?: string;
    };
    HighlightCreateRequest: {
      location: components['schemas']['HighlightLocationRequest'];
      /** Format: int64 */
      articleId?: number;
      color: components['schemas']['Color'];
      text: string;
      memo?: string;
    };
    HighlightLocationRequest: {
      startOffset: string;
      startXPath: string;
      endOffset: string;
      endXPath: string;
    };
    MemberSignupRequest: {
      nickname: string;
      email: string;
      /** Format: date */
      birthDate?: string;
      /** @enum {string} */
      gender: 'MALE' | 'FEMALE';
    };
    UpdateWeeklyGoalCountRequest: {
      /** Format: int64 */
      memberId: number;
      /** Format: int32 */
      weeklyGoalCount: number;
    };
    WeeklyGoalCountResponse: {
      /** Format: int64 */
      weeklyReadingId?: number;
      /** Format: int32 */
      weeklyGoalCount?: number;
    };
    UpdateHighlightRequest: {
      color?: components['schemas']['Color'];
      memo?: string;
    };
    HighlightLocation: {
      startOffset?: string;
      startXPath?: string;
      endOffset?: string;
      endXPath?: string;
    };
    HighlightResponse: {
      /** Format: int64 */
      id?: number;
      location?: components['schemas']['HighlightLocation'];
      /** Format: int64 */
      articleId?: number;
      color?: string;
      text?: string;
      memo?: string;
    };
    NewsletterResponse: {
      /** Format: int64 */
      newsletterId?: number;
      name?: string;
      imageUrl?: string;
      description?: string;
      mainPageUrl?: string;
      category?: string;
    };
    MemberProfileResponse: {
      /** Format: int64 */
      id?: number;
      email?: string;
      nickname?: string;
      profileImageUrl?: string;
    };
    ReadingInformationResponse: {
      /** Format: int32 */
      streakReadDay?: number;
      today?: components['schemas']['TodayReadingResponse'];
      weekly?: components['schemas']['WeeklyReadingResponse'];
    };
    TodayReadingResponse: {
      /** Format: int32 */
      readCount?: number;
      /** Format: int32 */
      totalCount?: number;
    };
    WeeklyReadingResponse: {
      /** Format: int32 */
      readCount?: number;
      /** Format: int32 */
      goalCount?: number;
    };
    PetResponse: {
      /** Format: int32 */
      level?: number;
      /** Format: int32 */
      totalScore?: number;
      /** Format: int32 */
      currentScore?: number;
    };
    Pageable: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      size?: number;
      sort?: string[];
    };
    BookmarkResponse: {
      /** Format: int64 */
      id?: number;
      /** Format: int64 */
      articleId?: number;
      title?: string;
      contentsSummary?: string;
      /** Format: date-time */
      arrivedDateTime?: string;
      thumbnailUrl?: string;
      /** Format: int32 */
      expectedReadTime?: number;
      isRead?: boolean;
      newsletter?: components['schemas']['NewsletterSummaryResponse'];
    };
    NewsletterSummaryResponse: {
      name?: string;
      imageUrl?: string;
      category?: string;
    };
    PageBookmarkResponse: {
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      totalPages?: number;
      /** Format: int32 */
      size?: number;
      content?: components['schemas']['BookmarkResponse'][];
      /** Format: int32 */
      number?: number;
      sort?: components['schemas']['SortObject'];
      /** Format: int32 */
      numberOfElements?: number;
      pageable?: components['schemas']['PageableObject'];
      first?: boolean;
      last?: boolean;
      empty?: boolean;
    };
    PageableObject: {
      /** Format: int64 */
      offset?: number;
      sort?: components['schemas']['SortObject'];
      paged?: boolean;
      /** Format: int32 */
      pageNumber?: number;
      /** Format: int32 */
      pageSize?: number;
      unpaged?: boolean;
    };
    SortObject: {
      empty?: boolean;
      sorted?: boolean;
      unsorted?: boolean;
    };
    BookmarkStatusResponse: {
      bookmarkStatus?: boolean;
    };
    GetArticlesOptions: {
      /** Format: date */
      date?: string;
      category?: string;
      keyword?: string;
    };
    ArticleResponse: {
      /** Format: int64 */
      articleId?: number;
      title?: string;
      contentsSummary?: string;
      /** Format: date-time */
      arrivedDateTime?: string;
      thumbnailUrl?: string;
      /** Format: int32 */
      expectedReadTime?: number;
      isRead?: boolean;
      newsletter?: components['schemas']['NewsletterSummaryResponse'];
    };
    PageArticleResponse: {
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      totalPages?: number;
      /** Format: int32 */
      size?: number;
      content?: components['schemas']['ArticleResponse'][];
      /** Format: int32 */
      number?: number;
      sort?: components['schemas']['SortObject'];
      /** Format: int32 */
      numberOfElements?: number;
      pageable?: components['schemas']['PageableObject'];
      first?: boolean;
      last?: boolean;
      empty?: boolean;
    };
    ArticleDetailResponse: {
      title?: string;
      contents?: string;
      /** Format: date-time */
      arrivedDateTime?: string;
      /** Format: int32 */
      expectedReadTime?: number;
      isRead?: boolean;
      newsletter?: components['schemas']['NewsletterBasicResponse'];
    };
    NewsletterBasicResponse: {
      name?: string;
      email?: string;
      imageUrl?: string;
      category?: string;
    };
    GetArticleCategoryStatisticsResponse: {
      /** Format: int32 */
      totalCount?: number;
      categories?: components['schemas']['GetArticleCountPerCategoryResponse'][];
    };
    GetArticleCountPerCategoryResponse: {
      category?: string;
      /** Format: int64 */
      count?: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  attend: {
    parameters: {
      query: {
        member: components['schemas']['Member'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getHighlights: {
    parameters: {
      query: {
        member: components['schemas']['Member'];
        articleId: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['HighlightResponse'][];
        };
      };
    };
  };
  createHighlight: {
    parameters: {
      query: {
        member: components['schemas']['Member'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['HighlightCreateRequest'];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  addBookmark: {
    parameters: {
      query: {
        member: components['schemas']['Member'];
      };
      header?: never;
      path: {
        articleId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteBookmark: {
    parameters: {
      query: {
        member: components['schemas']['Member'];
      };
      header?: never;
      path: {
        articleId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  signup: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['MemberSignupRequest'];
      };
    };
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  logout: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  updateWeeklyGoalCount: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateWeeklyGoalCountRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['WeeklyGoalCountResponse'];
        };
      };
    };
  };
  deleteHighlight: {
    parameters: {
      query: {
        member: components['schemas']['Member'];
      };
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  updateHighlight: {
    parameters: {
      query: {
        member: components['schemas']['Member'];
      };
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateHighlightRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['HighlightResponse'];
        };
      };
    };
  };
  updateIsRead: {
    parameters: {
      query: {
        member: components['schemas']['Member'];
      };
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getNewsletters: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['NewsletterResponse'][];
        };
      };
    };
  };
  getMember: {
    parameters: {
      query: {
        member: components['schemas']['Member'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['MemberProfileResponse'];
        };
      };
    };
  };
  getReadingInformation: {
    parameters: {
      query: {
        member: components['schemas']['Member'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ReadingInformationResponse'];
        };
      };
    };
  };
  getPet: {
    parameters: {
      query: {
        member: components['schemas']['Member'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PetResponse'];
        };
      };
    };
  };
  getBookmarks: {
    parameters: {
      query: {
        member: components['schemas']['Member'];
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PageBookmarkResponse'];
        };
      };
    };
  };
  getBookmarkStatus: {
    parameters: {
      query: {
        member: components['schemas']['Member'];
      };
      header?: never;
      path: {
        articleId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BookmarkStatusResponse'];
        };
      };
    };
  };
  login: {
    parameters: {
      query?: {
        env?: string;
      };
      header?: never;
      path: {
        provider: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getArticles: {
    parameters: {
      query: {
        member: components['schemas']['Member'];
        getArticlesOptions: components['schemas']['GetArticlesOptions'];
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PageArticleResponse'];
        };
      };
    };
  };
  getArticleDetail: {
    parameters: {
      query: {
        member: components['schemas']['Member'];
      };
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ArticleDetailResponse'];
        };
      };
    };
  };
  getArticleCategoryStatistics: {
    parameters: {
      query: {
        member: components['schemas']['Member'];
        keyword?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['GetArticleCategoryStatisticsResponse'];
        };
      };
    };
  };
}

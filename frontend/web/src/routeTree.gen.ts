/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as SignupRouteImport } from './routes/signup';
import { Route as MaintenanceRouteImport } from './routes/maintenance';
import { Route as LoginRouteImport } from './routes/login';
import { Route as BombomRouteImport } from './routes/_bombom';
import { Route as BombomIndexRouteImport } from './routes/_bombom/index';
import { Route as BombomTodayRouteImport } from './routes/_bombom/today';
import { Route as BombomStorageRouteImport } from './routes/_bombom/storage';
import { Route as BombomMypageRouteImport } from './routes/_bombom/mypage';
import { Route as BombomMemoRouteImport } from './routes/_bombom/memo';
import { Route as BombomGuideRouteImport } from './routes/_bombom/guide';
import { Route as BombomBookmarkRouteImport } from './routes/_bombom/bookmark';
import { Route as BombomArticlesArticleIdRouteImport } from './routes/_bombom/articles.$articleId';
import { Route as BombomArticlesGuideGuideIdRouteImport } from './routes/_bombom/articles.guide.$guideId';

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any);
const MaintenanceRoute = MaintenanceRouteImport.update({
  id: '/maintenance',
  path: '/maintenance',
  getParentRoute: () => rootRouteImport,
} as any);
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any);
const BombomRoute = BombomRouteImport.update({
  id: '/_bombom',
  getParentRoute: () => rootRouteImport,
} as any);
const BombomIndexRoute = BombomIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BombomRoute,
} as any);
const BombomTodayRoute = BombomTodayRouteImport.update({
  id: '/today',
  path: '/today',
  getParentRoute: () => BombomRoute,
} as any);
const BombomStorageRoute = BombomStorageRouteImport.update({
  id: '/storage',
  path: '/storage',
  getParentRoute: () => BombomRoute,
} as any);
const BombomMypageRoute = BombomMypageRouteImport.update({
  id: '/mypage',
  path: '/mypage',
  getParentRoute: () => BombomRoute,
} as any);
const BombomMemoRoute = BombomMemoRouteImport.update({
  id: '/memo',
  path: '/memo',
  getParentRoute: () => BombomRoute,
} as any);
const BombomGuideRoute = BombomGuideRouteImport.update({
  id: '/guide',
  path: '/guide',
  getParentRoute: () => BombomRoute,
} as any);
const BombomBookmarkRoute = BombomBookmarkRouteImport.update({
  id: '/bookmark',
  path: '/bookmark',
  getParentRoute: () => BombomRoute,
} as any);
const BombomArticlesArticleIdRoute = BombomArticlesArticleIdRouteImport.update({
  id: '/articles/$articleId',
  path: '/articles/$articleId',
  getParentRoute: () => BombomRoute,
} as any);
const BombomArticlesGuideGuideIdRoute =
  BombomArticlesGuideGuideIdRouteImport.update({
    id: '/articles/guide/$guideId',
    path: '/articles/guide/$guideId',
    getParentRoute: () => BombomRoute,
  } as any);

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute;
  '/maintenance': typeof MaintenanceRoute;
  '/signup': typeof SignupRoute;
  '/bookmark': typeof BombomBookmarkRoute;
  '/guide': typeof BombomGuideRoute;
  '/memo': typeof BombomMemoRoute;
  '/mypage': typeof BombomMypageRoute;
  '/storage': typeof BombomStorageRoute;
  '/today': typeof BombomTodayRoute;
  '/': typeof BombomIndexRoute;
  '/articles/$articleId': typeof BombomArticlesArticleIdRoute;
  '/articles/guide/$guideId': typeof BombomArticlesGuideGuideIdRoute;
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute;
  '/maintenance': typeof MaintenanceRoute;
  '/signup': typeof SignupRoute;
  '/bookmark': typeof BombomBookmarkRoute;
  '/guide': typeof BombomGuideRoute;
  '/memo': typeof BombomMemoRoute;
  '/mypage': typeof BombomMypageRoute;
  '/storage': typeof BombomStorageRoute;
  '/today': typeof BombomTodayRoute;
  '/': typeof BombomIndexRoute;
  '/articles/$articleId': typeof BombomArticlesArticleIdRoute;
  '/articles/guide/$guideId': typeof BombomArticlesGuideGuideIdRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/_bombom': typeof BombomRouteWithChildren;
  '/login': typeof LoginRoute;
  '/maintenance': typeof MaintenanceRoute;
  '/signup': typeof SignupRoute;
  '/_bombom/bookmark': typeof BombomBookmarkRoute;
  '/_bombom/guide': typeof BombomGuideRoute;
  '/_bombom/memo': typeof BombomMemoRoute;
  '/_bombom/mypage': typeof BombomMypageRoute;
  '/_bombom/storage': typeof BombomStorageRoute;
  '/_bombom/today': typeof BombomTodayRoute;
  '/_bombom/': typeof BombomIndexRoute;
  '/_bombom/articles/$articleId': typeof BombomArticlesArticleIdRoute;
  '/_bombom/articles/guide/$guideId': typeof BombomArticlesGuideGuideIdRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/login'
    | '/maintenance'
    | '/signup'
    | '/bookmark'
    | '/guide'
    | '/memo'
    | '/mypage'
    | '/storage'
    | '/today'
    | '/'
    | '/articles/$articleId'
    | '/articles/guide/$guideId';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/login'
    | '/maintenance'
    | '/signup'
    | '/bookmark'
    | '/guide'
    | '/memo'
    | '/mypage'
    | '/storage'
    | '/today'
    | '/'
    | '/articles/$articleId'
    | '/articles/guide/$guideId';
  id:
    | '__root__'
    | '/_bombom'
    | '/login'
    | '/maintenance'
    | '/signup'
    | '/_bombom/bookmark'
    | '/_bombom/guide'
    | '/_bombom/memo'
    | '/_bombom/mypage'
    | '/_bombom/storage'
    | '/_bombom/today'
    | '/_bombom/'
    | '/_bombom/articles/$articleId'
    | '/_bombom/articles/guide/$guideId';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  BombomRoute: typeof BombomRouteWithChildren;
  LoginRoute: typeof LoginRoute;
  MaintenanceRoute: typeof MaintenanceRoute;
  SignupRoute: typeof SignupRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup';
      path: '/signup';
      fullPath: '/signup';
      preLoaderRoute: typeof SignupRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/maintenance': {
      id: '/maintenance';
      path: '/maintenance';
      fullPath: '/maintenance';
      preLoaderRoute: typeof MaintenanceRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/login': {
      id: '/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof LoginRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_bombom': {
      id: '/_bombom';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof BombomRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_bombom/': {
      id: '/_bombom/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof BombomIndexRouteImport;
      parentRoute: typeof BombomRoute;
    };
    '/_bombom/today': {
      id: '/_bombom/today';
      path: '/today';
      fullPath: '/today';
      preLoaderRoute: typeof BombomTodayRouteImport;
      parentRoute: typeof BombomRoute;
    };
    '/_bombom/storage': {
      id: '/_bombom/storage';
      path: '/storage';
      fullPath: '/storage';
      preLoaderRoute: typeof BombomStorageRouteImport;
      parentRoute: typeof BombomRoute;
    };
    '/_bombom/mypage': {
      id: '/_bombom/mypage';
      path: '/mypage';
      fullPath: '/mypage';
      preLoaderRoute: typeof BombomMypageRouteImport;
      parentRoute: typeof BombomRoute;
    };
    '/_bombom/memo': {
      id: '/_bombom/memo';
      path: '/memo';
      fullPath: '/memo';
      preLoaderRoute: typeof BombomMemoRouteImport;
      parentRoute: typeof BombomRoute;
    };
    '/_bombom/guide': {
      id: '/_bombom/guide';
      path: '/guide';
      fullPath: '/guide';
      preLoaderRoute: typeof BombomGuideRouteImport;
      parentRoute: typeof BombomRoute;
    };
    '/_bombom/bookmark': {
      id: '/_bombom/bookmark';
      path: '/bookmark';
      fullPath: '/bookmark';
      preLoaderRoute: typeof BombomBookmarkRouteImport;
      parentRoute: typeof BombomRoute;
    };
    '/_bombom/articles/$articleId': {
      id: '/_bombom/articles/$articleId';
      path: '/articles/$articleId';
      fullPath: '/articles/$articleId';
      preLoaderRoute: typeof BombomArticlesArticleIdRouteImport;
      parentRoute: typeof BombomRoute;
    };
    '/_bombom/articles/guide/$guideId': {
      id: '/_bombom/articles/guide/$guideId';
      path: '/articles/guide/$guideId';
      fullPath: '/articles/guide/$guideId';
      preLoaderRoute: typeof BombomArticlesGuideGuideIdRouteImport;
      parentRoute: typeof BombomRoute;
    };
  }
}

interface BombomRouteChildren {
  BombomBookmarkRoute: typeof BombomBookmarkRoute;
  BombomGuideRoute: typeof BombomGuideRoute;
  BombomMemoRoute: typeof BombomMemoRoute;
  BombomMypageRoute: typeof BombomMypageRoute;
  BombomStorageRoute: typeof BombomStorageRoute;
  BombomTodayRoute: typeof BombomTodayRoute;
  BombomIndexRoute: typeof BombomIndexRoute;
  BombomArticlesArticleIdRoute: typeof BombomArticlesArticleIdRoute;
  BombomArticlesGuideGuideIdRoute: typeof BombomArticlesGuideGuideIdRoute;
}

const BombomRouteChildren: BombomRouteChildren = {
  BombomBookmarkRoute: BombomBookmarkRoute,
  BombomGuideRoute: BombomGuideRoute,
  BombomMemoRoute: BombomMemoRoute,
  BombomMypageRoute: BombomMypageRoute,
  BombomStorageRoute: BombomStorageRoute,
  BombomTodayRoute: BombomTodayRoute,
  BombomIndexRoute: BombomIndexRoute,
  BombomArticlesArticleIdRoute: BombomArticlesArticleIdRoute,
  BombomArticlesGuideGuideIdRoute: BombomArticlesGuideGuideIdRoute,
};

const BombomRouteWithChildren =
  BombomRoute._addFileChildren(BombomRouteChildren);

const rootRouteChildren: RootRouteChildren = {
  BombomRoute: BombomRouteWithChildren,
  LoginRoute: LoginRoute,
  MaintenanceRoute: MaintenanceRoute,
  SignupRoute: SignupRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

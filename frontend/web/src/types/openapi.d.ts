/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/login/sso/verify/success/apple': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['handleAppleFormPost'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/members/me/pet/attendance': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 출석 점수 부여
     * @description 오늘의 출석 점수를 펫에게 부여합니다.
     */
    post: operations['attend'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/highlights': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 하이라이트 목록 조회
     * @description 조건에 맞는 하이라이트 목록을 조회합니다.
     */
    get: operations['getHighlights'];
    put?: never;
    /**
     * 하이라이트 생성
     * @description 새로운 하이라이트를 생성합니다.
     */
    post: operations['createHighlight'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/bookmarks/articles/{articleId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 북마크 추가
     * @description 특정 아티클을 북마크에 추가합니다.
     */
    post: operations['addBookmark'];
    /**
     * 북마크 삭제
     * @description 특정 아티클을 북마크에서 삭제합니다.
     */
    delete: operations['deleteBookmark'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/auth/withdraw': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 회원 탈퇴
     * @description 현재 로그인한 회원의 계정을 삭제합니다. Apple 로그인 사용자의 경우 Apple 토큰도 함께 철회됩니다.
     */
    post: operations['withdraw'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/auth/signup': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 회원가입
     * @description OAuth2 인증 후 추가 정보를 입력하여 회원가입을 완료합니다.
     */
    post: operations['signup'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/auth/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 로그아웃
     * @description 현재 세션을 무효화하여 로그아웃합니다.
     */
    post: operations['logout'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/auth/login/{provider}/native': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 네이티브 OAuth2 로그인
     * @description 모바일 앱에서 받은 id_token과 authorization_code로 서버에서 토큰 교환 및 로그인 분기를 수행합니다. 기존 회원이면 '/'로, 신규면 '/signup'으로 리다이렉트합니다.
     */
    post: operations['nativeLogin'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/admin/sessions/cleanup': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['cleanupExpiredSessions'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/members/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 내 정보 조회
     * @description 로그인한 회원의 정보를 조회합니다.
     */
    get: operations['getMemberInfo'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * 내 정보 수정
     * @description 로그인한 회원의 정보(닉네임, 프로필이미지, 생년월일, 성별)를 수정합니다.
     */
    patch: operations['updateMemberInfo'];
    trace?: never;
  };
  '/api/v1/members/me/reading/progress/week/goal': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * 주간 목표 아티클 개수 수정
     * @description 주간 목표로 설정된 아티클 개수를 수정합니다.
     */
    patch: operations['updateWeeklyGoalCount'];
    trace?: never;
  };
  '/api/v1/highlights/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 하이라이트 삭제
     * @description 특정 하이라이트를 삭제합니다.
     */
    delete: operations['deleteHighlight'];
    options?: never;
    head?: never;
    /**
     * 하이라이트 내용/위치 수정
     * @description 특정 하이라이트의 내용(텍스트)이나 위치를 수정합니다.
     */
    patch: operations['updateHighlight'];
    trace?: never;
  };
  '/api/v1/guide/read': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * 가이드 메일 읽음 처리
     * @description 가이드 메일 읽었을 시, 키우기/읽기 점수 증가
     */
    patch: operations['updateRead'];
    trace?: never;
  };
  '/api/v1/articles/{id}/read': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * 아티클 읽음 처리
     * @description 특정 아티클을 읽음 처리합니다.
     */
    patch: operations['updateIsRead'];
    trace?: never;
  };
  '/api/v1/newsletters': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 뉴스레터 목록 조회
     * @description 모든 뉴스레터 목록을 조회합니다.
     */
    get: operations['getNewsletters'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/newsletters/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 뉴스레터 상세 조회
     * @description 특정 뉴스레터 상세 조회를 합니다.
     */
    get: operations['getNewsletterWithDetail'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/members/me/reading': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 읽기 정보 조회
     * @description 현재 사용자의 주간/오늘/연속 읽기 정보를 조회합니다.
     */
    get: operations['getReadingInformation'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/members/me/reading/month': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 나의 월간 읽기 개수 조회
     * @description 현재 로그인한 사용자의 이번 달 아티클 읽기 개수를 조회합니다.
     */
    get: operations['getMemberMonthlyReadingCount'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/members/me/reading/month/rank': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 이달의 독서왕 조회
     * @description 현재 읽기 카운트를 기준으로 내림차순하여 순위와 함께 조회합니다.
     */
    get: operations['getMonthlyReadingRank'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/members/me/reading/month/rank/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 나의 월간 순위 조회
     * @description 저장된 rank 기반으로 나의 순위와 총 랭킹 참여자 수를 반환합니다.
     */
    get: operations['getMemberMonthlyRank'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/members/me/profile': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 내 프로필 간단 조회
     * @description 로그인한 회원의 간단한 프로필 정보(id, email, nickname, profileImage)를 조회합니다.
     */
    get: operations['getMemberProfile'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/members/me/pet': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 내 펫 정보 조회
     * @description 현재 로그인한 사용자의 펫 정보를 조회합니다.
     */
    get: operations['getPet'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/members/me/newsletters': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 구독한 뉴스레터 목록 조회
     * @description 로그인한 회원이 구독중인 뉴스레터 목록을 조회합니다.
     */
    get: operations['getSubscribedNewsletters'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/highlights/statistics/newsletters': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 뉴스레터별 하이라이트 개수 조회
     * @description 뉴스레터별 하이라이트 개수 정보를 조회합니다.
     */
    get: operations['getHighlightNewsletterStatistics'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/bookmarks': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 북마크 목록 조회
     * @description 북마크 목록을 페이징하여 조회합니다. (정렬 기본값: ?page=0&size=10&sort=createdAt,desc)
     */
    get: operations['getBookmarks'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/bookmarks/status/articles/{articleId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 북마크 상태 조회
     * @description 특정 아티클의 북마크 상태를 조회합니다.
     */
    get: operations['getBookmarkStatus'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/bookmarks/statistics/newsletters': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 뉴스레터별 북마크 개수 조회
     * @description 뉴스레터별 북마크 개수 정보를 조회합니다.
     */
    get: operations['getBookmarkNewsletterStatistics'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/auth/signup/check': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 회원가입 필드 중복 체크
     * @description 회원가입에 사용되는 필드의 중복을 체크하여 true/false를 반환합니다.
     */
    get: operations['validateSignupField'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/auth/login/{provider}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * OAuth2 로그인
     * @description 지정된 OAuth2 제공자로 로그인을 시작합니다.
     */
    get: operations['login'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/articles': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 아티클 목록 조회
     * @description 조건에 맞는 아티클 목록을 페이징하여 조회합니다. (정렬 기본값: ?page=0&size=10&sort=arrivedDateTime,desc)
     */
    get: operations['getArticles'];
    put?: never;
    post?: never;
    /**
     * 아티클 여러 개 삭제
     * @description 1개 이상의 아티클들을 삭제합니다.
     */
    delete: operations['deleteArticles'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/articles/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 아티클 상세 조회
     * @description 특정 아티클의 상세 정보를 조회합니다.
     */
    get: operations['getArticleDetail'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/articles/{articleId}/highlights': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 아티클의 하이라이트 목록 조회
     * @description 특정 아티클의 하이라이트 목록을 조회합니다.
     */
    get: operations['getHighlights_1'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/articles/statistics/newsletters': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 뉴스레터별 아티클 개수 조회
     * @description 뉴스레터별 아티클 개수 정보를 조회합니다. 키워드 검색 시 해당 키워드가 제목에 포함된 아티클만 대상으로 합니다.
     */
    get: operations['getArticleNewsletterStatistics'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/articles/previous': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 지난 아티클 목록 조회
     * @description 조건에 맞는 지난 아티클 목록을 조회합니다.
     */
    get: operations['getPreviousArticles'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/articles/previous/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 지난 아티클 상세 조회
     * @description 특정 지난 아티클의 상세 정보를 조회합니다.
     */
    get: operations['getPreviousArticleDetail'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/admin/sessions/statistics': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getSessionStatistics'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    HighlightCreateRequest: {
      location: components['schemas']['HighlightLocationRequest'];
      /** Format: int64 */
      articleId?: number;
      /**
       * @description 하이라이트 색상 (HEX 형식, 예: #FF0000)
       * @example #FFD6C2
       */
      color: string;
      text: string;
      memo?: string;
    };
    HighlightLocationRequest: {
      /** Format: int32 */
      startOffset: number;
      startXPath: string;
      /** Format: int32 */
      endOffset: number;
      endXPath: string;
    };
    ArticleHighlightResponse: {
      /** Format: int64 */
      id: number;
      location: components['schemas']['HighlightLocationResponse'];
      /** Format: int64 */
      articleId: number;
      color: string;
      text: string;
      memo?: string;
    };
    HighlightLocationResponse: {
      /**
       * Format: int32
       * @description 시작 오프셋
       */
      startOffset: number;
      startXPath: string;
      /**
       * Format: int32
       * @description 끝 오프셋
       */
      endOffset: number;
      endXPath: string;
    };
    /** @description 회원가입 요청 데이터 */
    MemberSignupRequest: {
      nickname: string;
      email: string;
      /** Format: date */
      birthDate?: string;
      /** @enum {string} */
      gender?: 'MALE' | 'FEMALE' | 'NONE';
    };
    NativeLoginRequest: {
      identityToken: string;
      authorizationCode: string;
      email?: string;
      nickname?: string;
    };
    NativeLoginResponse: {
      isRegistered: boolean;
      email?: string;
      nickname?: string;
    };
    SessionCleanupResponse: {
      /** Format: int32 */
      deletedCount?: number;
      message?: string;
    };
    MemberInfoUpdateRequest: {
      nickname?: string;
      profileImageUrl?: string;
      /** Format: date */
      birthDate?: string;
      /** @enum {string} */
      gender?: 'MALE' | 'FEMALE' | 'NONE';
    };
    MemberInfoResponse: {
      /** Format: int64 */
      id: number;
      email: string;
      nickname: string;
      profileImageUrl?: string;
      /** @enum {string} */
      gender?: 'MALE' | 'FEMALE' | 'NONE';
      /** Format: date */
      birthDate?: string;
    };
    WeeklyGoalCountResponse: {
      /**
       * Format: int64
       * @description 주간 읽기 ID
       */
      weeklyReadingId: number;
      /**
       * Format: int32
       * @description 주간 목표 읽기 수
       */
      weeklyGoalCount: number;
    };
    UpdateHighlightRequest: {
      /**
       * @description 하이라이트 색상 (HEX 형식, 예: #FF0000)
       * @example #FFD6C2
       */
      color?: string;
      memo?: string;
    };
    NewsletterResponse: {
      /**
       * Format: int64
       * @description 뉴스레터 ID
       */
      newsletterId: number;
      /** @description 뉴스레터명 */
      name: string;
      /** @description 이미지 URL */
      imageUrl?: string;
      /** @description 설명 */
      description: string;
      /** @description 구독 URL */
      subscribeUrl: string;
      /** @description 카테고리 */
      category: string;
    };
    NewsletterWithDetailResponse: {
      name: string;
      description: string;
      imageUrl: string;
      category: string;
      mainPageUrl: string;
      subscribeUrl: string;
      issueCycle: string;
      previousNewsletterUrl?: string;
      subscribeMethod?: string;
    };
    ReadingInformationResponse: {
      /**
       * Format: int32
       * @description 연속 읽기 일수
       */
      streakReadDay: number;
      /** @description 오늘 읽기 정보 */
      today: components['schemas']['TodayReadingResponse'];
      /** @description 주간 읽기 정보 */
      weekly: components['schemas']['WeeklyReadingResponse'];
    };
    /** @description 오늘 읽기 정보 */
    TodayReadingResponse: {
      /**
       * Format: int32
       * @description 읽은 아티클 수
       */
      readCount: number;
      /**
       * Format: int32
       * @description 전체 아티클 수
       */
      totalCount: number;
    };
    /** @description 주간 읽기 정보 */
    WeeklyReadingResponse: {
      /**
       * Format: int32
       * @description 읽은 아티클 수
       */
      readCount: number;
      /**
       * Format: int32
       * @description 목표 읽기 수
       */
      goalCount: number;
    };
    MemberMonthlyReadingCountResponse: {
      /** Format: int32 */
      readCount: number;
    };
    MonthlyReadingRankResponse: {
      nickname: string;
      /** Format: int64 */
      rank: number;
      /** Format: int32 */
      monthlyReadCount: number;
    };
    MemberMonthlyReadingRankResponse: {
      /** Format: int64 */
      rank: number;
      /** Format: int64 */
      readCount: number;
      /** Format: int64 */
      nextRankDifference: number;
    };
    MemberProfileResponse: {
      /** Format: int64 */
      id: number;
      email: string;
      nickname: string;
      profileImageUrl?: string;
    };
    PetResponse: {
      /**
       * Format: int32
       * @description 펫 레벨
       */
      level: number;
      /**
       * Format: int32
       * @description 현재 스테이지 점수
       */
      currentStageScore: number;
      /**
       * Format: int32
       * @description 필요한 스테이지 점수
       */
      requiredStageScore: number;
      /** @description 출석 여부 */
      isAttended: boolean;
    };
    SubscribedNewsletterResponse: {
      /** Format: int64 */
      newsletterId: number;
      name: string;
      imageUrl?: string;
      description: string;
      category: string;
    };
    Pageable: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      size?: number;
      sort?: string[];
    };
    HighlightResponse: {
      /** Format: int64 */
      id: number;
      location: components['schemas']['HighlightLocationResponse'];
      /** Format: int64 */
      articleId: number;
      color: string;
      text: string;
      memo?: string;
      newsletterName?: string;
      newsletterImageUrl?: string;
      articleTitle?: string;
      /** Format: date-time */
      createdAt?: string;
    };
    PageHighlightResponse: {
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      totalPages?: number;
      /** Format: int32 */
      size?: number;
      content?: components['schemas']['HighlightResponse'][];
      /** Format: int32 */
      number?: number;
      sort?: components['schemas']['SortObject'];
      first?: boolean;
      last?: boolean;
      pageable?: components['schemas']['PageableObject'];
      /** Format: int32 */
      numberOfElements?: number;
      empty?: boolean;
    };
    PageableObject: {
      /** Format: int64 */
      offset?: number;
      sort?: components['schemas']['SortObject'];
      paged?: boolean;
      /** Format: int32 */
      pageNumber?: number;
      /** Format: int32 */
      pageSize?: number;
      unpaged?: boolean;
    };
    SortObject: {
      empty?: boolean;
      sorted?: boolean;
      unsorted?: boolean;
    };
    /** @description 뉴스레터 별 하이라이트 개수 통계 */
    HighlightCountPerNewsletterResponse: {
      /**
       * Format: int64
       * @description 뉴스레터 id
       */
      id: number;
      name: string;
      imageUrl: string;
      /**
       * Format: int32
       * @description 아티클 수
       */
      highlightCount: number;
    };
    HighlightStatisticsResponse: {
      /**
       * Format: int32
       * @description 전체 하이라이트 수
       */
      totalCount: number;
      /** @description 뉴스레터 별 하이라이트 개수 통계 */
      newsletters: components['schemas']['HighlightCountPerNewsletterResponse'][];
    };
    BookmarkResponse: {
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      articleId: number;
      title: string;
      contentsSummary: string;
      /** Format: date-time */
      arrivedDateTime: string;
      thumbnailUrl?: string;
      /** Format: int32 */
      expectedReadTime: number;
      isRead: boolean;
      newsletter: components['schemas']['NewsletterSummaryResponse'];
    };
    NewsletterSummaryResponse: {
      /** @description 뉴스레터명 */
      name: string;
      /** @description 이미지 URL */
      imageUrl?: string;
      /** @description 카테고리 */
      category: string;
    };
    PageBookmarkResponse: {
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      totalPages?: number;
      /** Format: int32 */
      size?: number;
      content?: components['schemas']['BookmarkResponse'][];
      /** Format: int32 */
      number?: number;
      sort?: components['schemas']['SortObject'];
      first?: boolean;
      last?: boolean;
      pageable?: components['schemas']['PageableObject'];
      /** Format: int32 */
      numberOfElements?: number;
      empty?: boolean;
    };
    BookmarkStatusResponse: {
      bookmarkStatus: boolean;
    };
    BookmarkCountPerNewsletterResponse: {
      /** Format: int64 */
      id: number;
      name: string;
      imageUrl: string;
      /** Format: int32 */
      bookmarkCount: number;
    };
    BookmarkNewsletterStatisticsResponse: {
      /** Format: int32 */
      totalCount: number;
      newsletters: components['schemas']['BookmarkCountPerNewsletterResponse'][];
    };
    SignupValidateRequest: {
      /** @enum {string} */
      field: 'NICKNAME' | 'EMAIL';
      userInput: string;
    };
    ArticlesOptionsRequest: {
      /** Format: date */
      date?: string;
      /** Format: int64 */
      newsletterId?: number;
      keyword?: string;
    };
    ArticleResponse: {
      /** Format: int64 */
      articleId: number;
      title: string;
      contentsSummary: string;
      /** Format: date-time */
      arrivedDateTime: string;
      thumbnailUrl?: string;
      /** Format: int32 */
      expectedReadTime: number;
      isRead: boolean;
      isBookmarked: boolean;
      /** @description 뉴스레터 정보 */
      newsletter: components['schemas']['NewsletterSummaryResponse'];
    };
    PageArticleResponse: {
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      totalPages?: number;
      /** Format: int32 */
      size?: number;
      content?: components['schemas']['ArticleResponse'][];
      /** Format: int32 */
      number?: number;
      sort?: components['schemas']['SortObject'];
      first?: boolean;
      last?: boolean;
      pageable?: components['schemas']['PageableObject'];
      /** Format: int32 */
      numberOfElements?: number;
      empty?: boolean;
    };
    ArticleDetailResponse: {
      title: string;
      contents: string;
      /** Format: date-time */
      arrivedDateTime: string;
      /** Format: int32 */
      expectedReadTime: number;
      isRead: boolean;
      newsletter: components['schemas']['NewsletterBasicResponse'];
    };
    NewsletterBasicResponse: {
      /** @description 뉴스레터명 */
      name: string;
      /** @description 이메일 */
      email: string;
      /** @description 이미지 URL */
      imageUrl?: string;
      /** @description 카테고리 */
      category: string;
    };
    ArticleNewsletterStatisticOptionsRequest: {
      keyword?: string;
    };
    ArticleCountPerNewsletterResponse: {
      /** Format: int64 */
      id: number;
      name: string;
      imageUrl: string;
      /** Format: int32 */
      articleCount: number;
    };
    ArticleNewsletterStatisticsResponse: {
      /** Format: int32 */
      totalCount: number;
      newsletters: components['schemas']['ArticleCountPerNewsletterResponse'][];
    };
    PreviousArticleRequest: {
      /** Format: int64 */
      newsletterId: number;
      /** Format: int32 */
      limit?: number;
    };
    PreviousArticleResponse: {
      /** Format: int64 */
      articleId: number;
      title: string;
      contentsSummary: string;
      /** Format: int32 */
      expectedReadTime: number;
    };
    PreviousArticleDetailResponse: {
      title: string;
      contents: string;
      /** Format: date-time */
      arrivedDateTime: string;
      /** Format: int32 */
      expectedReadTime: number;
      newsletter: components['schemas']['NewsletterBasicResponse'];
    };
    SessionStatisticsResponse: {
      /** Format: int32 */
      totalSessions?: number;
      /** Format: int32 */
      activeSessions?: number;
      /** Format: int32 */
      expiredSessions?: number;
    };
    /** @description 아티클 ID */
    DeleteArticlesRequest: {
      articleIds: number[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  handleAppleFormPost: {
    parameters: {
      query?: {
        user?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  attend: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 출석 점수 부여 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 인증 실패 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getHighlights: {
    parameters: {
      query: {
        /** @description 아티클 ID (예: ?articleId=1) */
        articleId?: number;
        /** @description 뉴스레터 ID (예: ?newsletterId=1) */
        newsletterId?: number;
        /** @description 페이징 관련 요청 (예: ?page=0&size=10) */
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 하이라이트 목록 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PageHighlightResponse'];
        };
      };
      /** @description 잘못된 요청 값 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 인증 실패 (로그인 필요) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  createHighlight: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['HighlightCreateRequest'];
      };
    };
    responses: {
      /** @description 하이라이트 생성 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ArticleHighlightResponse'];
        };
      };
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ArticleHighlightResponse'];
        };
      };
      /** @description 잘못된 요청 값 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 인증 실패 (로그인 필요) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 아티클에 대한 접근 권한 없음 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 아티클을 찾을 수 없음 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  addBookmark: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 아티클 ID */
        articleId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 북마크 추가 성공 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 아티클에 대한 접근 권한 없음 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 아티클을 찾을 수 없음 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteBookmark: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 아티클 ID */
        articleId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 북마크 삭제 성공 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 아티클에 대한 접근 권한 없음 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 아티클을 찾을 수 없음 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  withdraw: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 탈퇴 성공 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 인증되지 않은 사용자 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  signup: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['MemberSignupRequest'];
      };
    };
    responses: {
      /** @description 회원가입 성공 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 잘못된 요청 데이터 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description OAuth2 인증 정보 없음 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  logout: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 로그아웃 성공 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  nativeLogin: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        provider: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['NativeLoginRequest'];
      };
    };
    responses: {
      /** @description 리다이렉트 수행 (기존: '/', 신규: '/signup') */
      302: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['NativeLoginResponse'];
        };
      };
      /** @description 지원하지 않는 제공자 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['NativeLoginResponse'];
        };
      };
      /** @description 토큰 검증 실패 또는 교환 실패 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['NativeLoginResponse'];
        };
      };
    };
  };
  cleanupExpiredSessions: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['SessionCleanupResponse'];
        };
      };
    };
  };
  getMemberInfo: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 내 정보 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['MemberInfoResponse'];
        };
      };
      /** @description 인증 실패 (로그인 필요) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  updateMemberInfo: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['MemberInfoUpdateRequest'];
      };
    };
    responses: {
      /** @description 내 정보 수정 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['MemberInfoResponse'];
        };
      };
      /** @description 잘못된 요청 데이터 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['MemberInfoResponse'];
        };
      };
      /** @description 인증 실패 (로그인 필요) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  updateWeeklyGoalCount: {
    parameters: {
      query: {
        weeklyGoalCount: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 주간 목표 개수 수정 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['WeeklyGoalCountResponse'];
        };
      };
      /** @description 잘못된 요청 값 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 인증 실패 (로그인 필요) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 주간 읽기 정보를 찾을 수 없음 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteHighlight: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 하이라이트 ID */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 하이라이트 삭제 성공 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 인증 실패 (로그인 필요) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 하이라이트에 대한 접근 권한 없음 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 하이라이트를 찾을 수 없음 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  updateHighlight: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 하이라이트 ID */
        id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateHighlightRequest'];
      };
    };
    responses: {
      /** @description 하이라이트 수정 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ArticleHighlightResponse'];
        };
      };
      /** @description 잘못된 요청 값 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 인증 실패 (로그인 필요) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 하이라이트에 대한 접근 권한 없음 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 하이라이트를 찾을 수 없음 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  updateRead: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 읽음 처리 성공 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 멤버의 읽기 정보가 없을 경우 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  updateIsRead: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description 아티클 ID
         * @example 1
         */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 읽음 처리 성공 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 아티클에 대한 접근 권한 없음 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 아티클을 찾을 수 없음 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getNewsletters: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 뉴스레터 목록 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['NewsletterResponse'][];
        };
      };
    };
  };
  getNewsletterWithDetail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 뉴스레터 ID */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 뉴스레터 상세 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['NewsletterWithDetailResponse'];
        };
      };
      /** @description 잘못된 요청 (유효하지 않은 ID) */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 뉴스레터를 찾을 수 없음 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getReadingInformation: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 읽기 정보 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ReadingInformationResponse'];
        };
      };
      /** @description 인증 실패 (로그인 필요) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMemberMonthlyReadingCount: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 월간 읽기 개수 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['MemberMonthlyReadingCountResponse'];
        };
      };
      /** @description 인증 실패 (로그인 필요) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 월간 읽기 정보를 찾을 수 없음 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMonthlyReadingRank: {
    parameters: {
      query: {
        /** @description 최대 조회 개수 (예: ?limit=10) */
        limit: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 이달의 독서왕 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['MonthlyReadingRankResponse'][];
        };
      };
      /** @description 잘못된 요청 값 (limit는 1 이상의 값이어야 함) */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 인증 실패 (로그인 필요) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMemberMonthlyRank: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 나의 월간 순위 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['MemberMonthlyReadingRankResponse'];
        };
      };
      /** @description 인증 실패 (로그인 필요) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMemberProfile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 프로필 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['MemberProfileResponse'];
        };
      };
      /** @description 인증 실패 (로그인 필요) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getPet: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 펫 정보 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PetResponse'];
        };
      };
      /** @description 인증 실패 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PetResponse'];
        };
      };
    };
  };
  getSubscribedNewsletters: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 구독한 뉴스레터 목록 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['SubscribedNewsletterResponse'][];
        };
      };
      /** @description 인증 실패 (로그인 필요) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getHighlightNewsletterStatistics: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 뉴스레터별 하이라이트 개수 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['HighlightStatisticsResponse'];
        };
      };
      /** @description 인증 실패 (로그인 필요) */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getBookmarks: {
    parameters: {
      query: {
        /** @description 뉴스레터 ID (선택) */
        newsletterId?: number;
        /** @description 페이징 관련 요청 (예: ?page=0&size=10&sort=createdAt,desc) */
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 북마크 목록 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PageBookmarkResponse'];
        };
      };
      /** @description 잘못된 정렬 파라미터 요청 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getBookmarkStatus: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 아티클 ID */
        articleId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 북마크 상태 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BookmarkStatusResponse'];
        };
      };
    };
  };
  getBookmarkNewsletterStatistics: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 뉴스레터별 개수 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BookmarkNewsletterStatisticsResponse'];
        };
      };
    };
  };
  validateSignupField: {
    parameters: {
      query: {
        /** @description 중복 체크 요청 데이터 */
        request: components['schemas']['SignupValidateRequest'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 중복 체크 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': 'OK' | 'DUPLICATE' | 'INVALID_FORMAT';
        };
      };
      /** @description 잘못된 요청 데이터 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': 'OK' | 'DUPLICATE' | 'INVALID_FORMAT';
        };
      };
    };
  };
  login: {
    parameters: {
      query?: {
        env?: string;
      };
      header?: never;
      path: {
        /**
         * @description OAuth2 제공자 (google, kakao 등)
         * @example google
         */
        provider: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OAuth2 인증 페이지로 리다이렉트 */
      302: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getArticles: {
    parameters: {
      query: {
        /** @description 필터링 관련 요청 */
        articlesOptionsRequest: components['schemas']['ArticlesOptionsRequest'];
        /** @description 페이징 관련 요청 (예: ?page=0&size=10&sort=createdAt,desc) */
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 아티클 목록 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PageArticleResponse'];
        };
      };
      /** @description 잘못된 정렬 파라미터 요청 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteArticles: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteArticlesRequest'];
      };
    };
    responses: {
      /** @description 아티클 삭제 성공 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 아티클에 대한 접근 권한 없음 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getArticleDetail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 아티클 ID */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 아티클 상세 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ArticleDetailResponse'];
        };
      };
      /** @description 아티클에 대한 접근 권한 없음 */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 아티클을 찾을 수 없음 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getHighlights_1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        articleId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 아티클의 하이라이트 목록 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ArticleHighlightResponse'][];
        };
      };
    };
  };
  getArticleNewsletterStatistics: {
    parameters: {
      query: {
        /** @description 검색 옵션 */
        request: components['schemas']['ArticleNewsletterStatisticOptionsRequest'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 뉴스레터별 개수 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['ArticleNewsletterStatisticsResponse'];
        };
      };
    };
  };
  getPreviousArticles: {
    parameters: {
      query: {
        /** @description 필터링 관련 요청 */
        previousArticleRequest: components['schemas']['PreviousArticleRequest'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 지난 아티클 목록 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PreviousArticleResponse'][];
        };
      };
      /** @description 잘못된 쿼리 파라미터로 요청 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getPreviousArticleDetail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 아티클 ID */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 지난 아티클 상세 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['PreviousArticleDetailResponse'];
        };
      };
      /** @description 잘못된 Path Variable로 요청 */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description 아티클을 찾을 수 없음 */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getSessionStatistics: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['SessionStatisticsResponse'];
        };
      };
    };
  };
}
